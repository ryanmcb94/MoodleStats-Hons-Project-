//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IHonsService")]
public interface IHonsService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUser", ReplyAction="http://tempuri.org/IHonsService/getUserResponse")]
    MoodleObjects.MoodleUser getUser(string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUser", ReplyAction="http://tempuri.org/IHonsService/getUserResponse")]
    System.Threading.Tasks.Task<MoodleObjects.MoodleUser> getUserAsync(string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/login", ReplyAction="http://tempuri.org/IHonsService/loginResponse")]
    MoodleObjects.MoodleUser login(string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/login", ReplyAction="http://tempuri.org/IHonsService/loginResponse")]
    System.Threading.Tasks.Task<MoodleObjects.MoodleUser> loginAsync(string username, string password);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/Register", ReplyAction="http://tempuri.org/IHonsService/RegisterResponse")]
    void Register(string moodleUsername, string moodlePassword, string password, string fName, string lName, string location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/Register", ReplyAction="http://tempuri.org/IHonsService/RegisterResponse")]
    System.Threading.Tasks.Task RegisterAsync(string moodleUsername, string moodlePassword, string password, string fName, string lName, string location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUserByCourse", ReplyAction="http://tempuri.org/IHonsService/getUserByCourseResponse")]
    MoodleObjects.MoodleUser[] getUserByCourse(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUserByCourse", ReplyAction="http://tempuri.org/IHonsService/getUserByCourseResponse")]
    System.Threading.Tasks.Task<MoodleObjects.MoodleUser[]> getUserByCourseAsync(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUserByID", ReplyAction="http://tempuri.org/IHonsService/getUserByIDResponse")]
    MoodleObjects.MoodleUser getUserByID(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUserByID", ReplyAction="http://tempuri.org/IHonsService/getUserByIDResponse")]
    System.Threading.Tasks.Task<MoodleObjects.MoodleUser> getUserByIDAsync(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getCourse", ReplyAction="http://tempuri.org/IHonsService/getCourseResponse")]
    MoodleObjects.MoodleCourse getCourse(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getCourse", ReplyAction="http://tempuri.org/IHonsService/getCourseResponse")]
    System.Threading.Tasks.Task<MoodleObjects.MoodleCourse> getCourseAsync(int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/addLocation", ReplyAction="http://tempuri.org/IHonsService/addLocationResponse")]
    void addLocation(int userID, double x, double y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/addLocation", ReplyAction="http://tempuri.org/IHonsService/addLocationResponse")]
    System.Threading.Tasks.Task addLocationAsync(int userID, double x, double y);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/updateLocationDB", ReplyAction="http://tempuri.org/IHonsService/updateLocationDBResponse")]
    void updateLocationDB();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/updateLocationDB", ReplyAction="http://tempuri.org/IHonsService/updateLocationDBResponse")]
    System.Threading.Tasks.Task updateLocationDBAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getBestMatches", ReplyAction="http://tempuri.org/IHonsService/getBestMatchesResponse")]
    MoodleObjects.MoodleUser[] getBestMatches(MoodleObjects.MoodleUser user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getBestMatches", ReplyAction="http://tempuri.org/IHonsService/getBestMatchesResponse")]
    System.Threading.Tasks.Task<MoodleObjects.MoodleUser[]> getBestMatchesAsync(MoodleObjects.MoodleUser user);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getCourseAveragesMonth", ReplyAction="http://tempuri.org/IHonsService/getCourseAveragesMonthResponse")]
    System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]> getCourseAveragesMonth(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getCourseAveragesMonth", ReplyAction="http://tempuri.org/IHonsService/getCourseAveragesMonthResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]>> getCourseAveragesMonthAsync(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getCourseAveragesWeek", ReplyAction="http://tempuri.org/IHonsService/getCourseAveragesWeekResponse")]
    System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]> getCourseAveragesWeek(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getCourseAveragesWeek", ReplyAction="http://tempuri.org/IHonsService/getCourseAveragesWeekResponse")]
    System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]>> getCourseAveragesWeekAsync(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getAveragesMonth", ReplyAction="http://tempuri.org/IHonsService/getAveragesMonthResponse")]
    MoodleObjects.LocationAvg[] getAveragesMonth(MoodleObjects.MoodleUser[] users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getAveragesMonth", ReplyAction="http://tempuri.org/IHonsService/getAveragesMonthResponse")]
    System.Threading.Tasks.Task<MoodleObjects.LocationAvg[]> getAveragesMonthAsync(MoodleObjects.MoodleUser[] users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getAveragesWeek", ReplyAction="http://tempuri.org/IHonsService/getAveragesWeekResponse")]
    MoodleObjects.LocationAvg[] getAveragesWeek(MoodleObjects.MoodleUser[] users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getAveragesWeek", ReplyAction="http://tempuri.org/IHonsService/getAveragesWeekResponse")]
    System.Threading.Tasks.Task<MoodleObjects.LocationAvg[]> getAveragesWeekAsync(MoodleObjects.MoodleUser[] users);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/setUserTarget", ReplyAction="http://tempuri.org/IHonsService/setUserTargetResponse")]
    void setUserTarget(int userID, int target);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/setUserTarget", ReplyAction="http://tempuri.org/IHonsService/setUserTargetResponse")]
    System.Threading.Tasks.Task setUserTargetAsync(int userID, int target);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUserTarget", ReplyAction="http://tempuri.org/IHonsService/getUserTargetResponse")]
    int getUserTarget(int userID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUserTarget", ReplyAction="http://tempuri.org/IHonsService/getUserTargetResponse")]
    System.Threading.Tasks.Task<int> getUserTargetAsync(int userID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getBestMatchesAvgs", ReplyAction="http://tempuri.org/IHonsService/getBestMatchesAvgsResponse")]
    int[] getBestMatchesAvgs(int userID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getBestMatchesAvgs", ReplyAction="http://tempuri.org/IHonsService/getBestMatchesAvgsResponse")]
    System.Threading.Tasks.Task<int[]> getBestMatchesAvgsAsync(int userID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUsersAvg", ReplyAction="http://tempuri.org/IHonsService/getUsersAvgResponse")]
    int[] getUsersAvg(int userID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getUsersAvg", ReplyAction="http://tempuri.org/IHonsService/getUsersAvgResponse")]
    System.Threading.Tasks.Task<int[]> getUsersAvgAsync(int userID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getAvgs", ReplyAction="http://tempuri.org/IHonsService/getAvgsResponse")]
    int[][] getAvgs(int userID, string time, int courseID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHonsService/getAvgs", ReplyAction="http://tempuri.org/IHonsService/getAvgsResponse")]
    System.Threading.Tasks.Task<int[][]> getAvgsAsync(int userID, string time, int courseID);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IHonsServiceChannel : IHonsService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class HonsServiceClient : System.ServiceModel.ClientBase<IHonsService>, IHonsService
{
    
    public HonsServiceClient()
    {
    }
    
    public HonsServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public HonsServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public HonsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public HonsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public MoodleObjects.MoodleUser getUser(string username, string password)
    {
        return base.Channel.getUser(username, password);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.MoodleUser> getUserAsync(string username, string password)
    {
        return base.Channel.getUserAsync(username, password);
    }
    
    public MoodleObjects.MoodleUser login(string username, string password)
    {
        return base.Channel.login(username, password);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.MoodleUser> loginAsync(string username, string password)
    {
        return base.Channel.loginAsync(username, password);
    }
    
    public void Register(string moodleUsername, string moodlePassword, string password, string fName, string lName, string location)
    {
        base.Channel.Register(moodleUsername, moodlePassword, password, fName, lName, location);
    }
    
    public System.Threading.Tasks.Task RegisterAsync(string moodleUsername, string moodlePassword, string password, string fName, string lName, string location)
    {
        return base.Channel.RegisterAsync(moodleUsername, moodlePassword, password, fName, lName, location);
    }
    
    public MoodleObjects.MoodleUser[] getUserByCourse(int ID)
    {
        return base.Channel.getUserByCourse(ID);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.MoodleUser[]> getUserByCourseAsync(int ID)
    {
        return base.Channel.getUserByCourseAsync(ID);
    }
    
    public MoodleObjects.MoodleUser getUserByID(int ID)
    {
        return base.Channel.getUserByID(ID);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.MoodleUser> getUserByIDAsync(int ID)
    {
        return base.Channel.getUserByIDAsync(ID);
    }
    
    public MoodleObjects.MoodleCourse getCourse(int ID)
    {
        return base.Channel.getCourse(ID);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.MoodleCourse> getCourseAsync(int ID)
    {
        return base.Channel.getCourseAsync(ID);
    }
    
    public void addLocation(int userID, double x, double y)
    {
        base.Channel.addLocation(userID, x, y);
    }
    
    public System.Threading.Tasks.Task addLocationAsync(int userID, double x, double y)
    {
        return base.Channel.addLocationAsync(userID, x, y);
    }
    
    public void updateLocationDB()
    {
        base.Channel.updateLocationDB();
    }
    
    public System.Threading.Tasks.Task updateLocationDBAsync()
    {
        return base.Channel.updateLocationDBAsync();
    }
    
    public MoodleObjects.MoodleUser[] getBestMatches(MoodleObjects.MoodleUser user)
    {
        return base.Channel.getBestMatches(user);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.MoodleUser[]> getBestMatchesAsync(MoodleObjects.MoodleUser user)
    {
        return base.Channel.getBestMatchesAsync(user);
    }
    
    public System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]> getCourseAveragesMonth(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users)
    {
        return base.Channel.getCourseAveragesMonth(users);
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]>> getCourseAveragesMonthAsync(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users)
    {
        return base.Channel.getCourseAveragesMonthAsync(users);
    }
    
    public System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]> getCourseAveragesWeek(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users)
    {
        return base.Channel.getCourseAveragesWeek(users);
    }
    
    public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.LocationAvg[]>> getCourseAveragesWeekAsync(System.Collections.Generic.Dictionary<MoodleObjects.MoodleCourse, MoodleObjects.MoodleUser[]> users)
    {
        return base.Channel.getCourseAveragesWeekAsync(users);
    }
    
    public MoodleObjects.LocationAvg[] getAveragesMonth(MoodleObjects.MoodleUser[] users)
    {
        return base.Channel.getAveragesMonth(users);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.LocationAvg[]> getAveragesMonthAsync(MoodleObjects.MoodleUser[] users)
    {
        return base.Channel.getAveragesMonthAsync(users);
    }
    
    public MoodleObjects.LocationAvg[] getAveragesWeek(MoodleObjects.MoodleUser[] users)
    {
        return base.Channel.getAveragesWeek(users);
    }
    
    public System.Threading.Tasks.Task<MoodleObjects.LocationAvg[]> getAveragesWeekAsync(MoodleObjects.MoodleUser[] users)
    {
        return base.Channel.getAveragesWeekAsync(users);
    }
    
    public void setUserTarget(int userID, int target)
    {
        base.Channel.setUserTarget(userID, target);
    }
    
    public System.Threading.Tasks.Task setUserTargetAsync(int userID, int target)
    {
        return base.Channel.setUserTargetAsync(userID, target);
    }
    
    public int getUserTarget(int userID)
    {
        return base.Channel.getUserTarget(userID);
    }
    
    public System.Threading.Tasks.Task<int> getUserTargetAsync(int userID)
    {
        return base.Channel.getUserTargetAsync(userID);
    }
    
    public int[] getBestMatchesAvgs(int userID)
    {
        return base.Channel.getBestMatchesAvgs(userID);
    }
    
    public System.Threading.Tasks.Task<int[]> getBestMatchesAvgsAsync(int userID)
    {
        return base.Channel.getBestMatchesAvgsAsync(userID);
    }
    
    public int[] getUsersAvg(int userID)
    {
        return base.Channel.getUsersAvg(userID);
    }
    
    public System.Threading.Tasks.Task<int[]> getUsersAvgAsync(int userID)
    {
        return base.Channel.getUsersAvgAsync(userID);
    }
    
    public int[][] getAvgs(int userID, string time, int courseID)
    {
        return base.Channel.getAvgs(userID, time, courseID);
    }
    
    public System.Threading.Tasks.Task<int[][]> getAvgsAsync(int userID, string time, int courseID)
    {
        return base.Channel.getAvgsAsync(userID, time, courseID);
    }
}
